generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    owner
    vet
    admin
}

model User {
    id          String    @id @default(uuid()) @db.Uuid
    email       String    @unique @db.VarChar(255) // lowercase
    password    String    @db.Text
    name        String?   @db.VarChar(255)
    role        Role      @default(owner)
    createdAt   DateTime  @default(now()) @db.Timestamptz(6)
    updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
    lastLoginAt DateTime? @db.Timestamptz(6)

    pets      PetOwner[]
    events    Event[]
    documents Document[]
    favorites Favorite[]
    sessions  RefreshSession[]

    @@index([createdAt, id], map: "users_createdAt_id_idx")
    @@map("users")
}

model Pet {
    id         String    @id @default(uuid()) @db.Uuid
    name       String
    species    String
    breed      String?
    birthDate  DateTime? @db.Date
    bio        String?   @db.Text
    color      String?   @db.VarChar(100)
    birthplace String?   @db.VarChar(255)
    location   String?   @db.VarChar(255)
    photoUrl   String?   @map("photo_url") @db.Text
    privacy    String?   @db.VarChar(32)

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    owners    PetOwner[]
    events    Event[]
    documents Document[]
    favorites Favorite[]

    @@index([createdAt, id], map: "pets_createdAt_id_idx")
    @@map("pets")
}

model PetOwner {
    id        String   @id @default(uuid()) @db.Uuid
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.Uuid
    pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId     String   @db.Uuid
    role      String   @default("owner")
    createdAt DateTime @default(now()) @db.Timestamptz(6)

    @@unique([userId, petId], map: "pet_owner_user_pet_unique")
    @@index([createdAt, id], map: "pet_owners_createdAt_id_idx")
    @@map("pet_owners")
}

enum EventRepeat {
    once
    daily
    weekly
    monthly
    yearly
}

enum EventStatus {
    planned
    completed
    skipped
}

model Event {
    id     String @id @default(uuid()) @db.Uuid
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid
    pet    Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId  String @db.Uuid

    type        String
    title       String
    description String?     @db.Text
    date        DateTime    @db.Timestamptz(6)
    repeat      EventRepeat @default(once)
    status      EventStatus @default(planned)
    // доп.
    notes       String?     @db.Text

    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    @@index([date], map: "events_date_idx")
    @@index([createdAt, id], map: "events_createdAt_id_idx")
    @@map("events")
}

model Document {
    id     String  @id @default(uuid()) @db.Uuid
    pet    Pet?    @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId  String? @db.Uuid
    user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId String? @db.Uuid

    // уже были
    filename     String
    mimeType     String?
    size         Int?
    sha256       String  @unique @db.VarChar(128) // uniq
    key          String? @unique // obj key for S3/MinIO 
    url          String? // local storage
    originalName String? @map("original_name") @db.Text
    description  String? @db.Text

    createdAt DateTime @default(now()) @db.Timestamptz(6)

    @@index([createdAt, id], map: "documents_createdAt_id_idx")
    @@map("documents")
}

model Favorite {
    id        String   @id @default(uuid()) @db.Uuid
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.Uuid
    pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId     String   @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)

    @@unique([userId, petId], map: "favorites_user_pet_unique")
    @@index([createdAt, id], map: "favorites_createdAt_id_idx")
    @@map("favorites")
}

model RefreshSession {
    id        String    @id @default(uuid()) @db.Uuid
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String    @db.Uuid
    tokenHash String    @db.Text
    userAgent String?   @db.Text
    ip        String?   @db.VarChar(50)
    expiresAt DateTime
    createdAt DateTime  @default(now()) @db.Timestamptz(6)
    rotatedAt DateTime?
    revokedAt DateTime?

    @@index([createdAt, id], map: "refresh_sessions_createdAt_id_idx")
    @@map("refresh_sessions")
}
